services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka-init:
    image: confluentinc/cp-kafka:7.6.1
    depends_on:
      - kafka
    entrypoint: ["/bin/bash", "-c", "sleep 20 && /init-scripts/kafka-init.sh"]
    volumes:
      - ../docker/init-scripts:/init-scripts

  db:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: marketdata-api
    command: ["/app/entrypoint.sh"]
    volumes:
      - ../app:/app/app
      - ../scripts:/app/scripts
    ports:
      - "8000:8000"
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ../.env

  ma_consumer:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: ma-consumer
    command: sh -c "sleep 10 && python scripts/run_ma_consumer.py"
    volumes:
      - ../:/app
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    env_file:
      - ../.env

  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - "8080:8080"

volumes:
  postgres_data:
